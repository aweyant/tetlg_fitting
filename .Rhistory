bind_rows(dts_exceedance_df %>%
filter(near(p_val, quantiles_of_interest[4], tol = 1/2 * 10^(-1))) %>%
slice_sample(n = 10) %>%
mutate(class = "nearly_perfect"))
# Save qq plots for each sampled point ------------------------------------
lats_of_int <- dts_exceedance_subset_df$lat
lons_of_int <- dts_exceedance_subset_df$lon
i = 21
prec_point_df <- tidync(x = "./data/livneh_unsplit/complete.prec.nc") %>%
hyper_filter(lon = (lon %in% lons_of_int[i])) %>%
hyper_filter(lat = (lat %in% lats_of_int[i])) %>%
hyper_tibble() %>%
group_by(lat,lon) %>%
mutate(threshold = quantile(prec, 0.95)) %>%
filter(prec > threshold) %>%
mutate(exceedance = prec-threshold)
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
signif((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 2))
)
?round
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
round((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 2))
)
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
round((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 3))
)
lats_of_int[i]
lons_of_int[i]
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
round((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 3))
)
i = 22
prec_point_df <- tidync(x = "./data/livneh_unsplit/complete.prec.nc") %>%
hyper_filter(lon = (lon %in% lons_of_int[i])) %>%
hyper_filter(lat = (lat %in% lats_of_int[i])) %>%
hyper_tibble() %>%
group_by(lat,lon) %>%
mutate(threshold = quantile(prec, 0.95)) %>%
filter(prec > threshold) %>%
mutate(exceedance = prec-threshold)
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
round((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 3))
)
i = 31
prec_point_df <- tidync(x = "./data/livneh_unsplit/complete.prec.nc") %>%
hyper_filter(lon = (lon %in% lons_of_int[i])) %>%
hyper_filter(lat = (lat %in% lats_of_int[i])) %>%
hyper_tibble() %>%
group_by(lat,lon) %>%
mutate(threshold = quantile(prec, 0.95)) %>%
filter(prec > threshold) %>%
mutate(exceedance = prec-threshold)
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
round((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 3))
)
i = 35
prec_point_df <- tidync(x = "./data/livneh_unsplit/complete.prec.nc") %>%
hyper_filter(lon = (lon %in% lons_of_int[i])) %>%
hyper_filter(lat = (lat %in% lats_of_int[i])) %>%
hyper_tibble() %>%
group_by(lat,lon) %>%
mutate(threshold = quantile(prec, 0.95)) %>%
filter(prec > threshold) %>%
mutate(exceedance = prec-threshold)
qqmath(~exceedance,
data = prec_point_df,
distribution = function(p) {qexp(p, rate = (prec_event_parameters %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$b_hat)},
panel = function(x, ...) {
panel.qqmathline(x, ...)
panel.qqmath(x, ...)
},
aspect = "xy",
xlab = "Theoretical",
ylab = "Observed",
sub = paste0("p = ",
round((dts_exceedance_df %>%
filter(lat == lats_of_int[i],
lon == lons_of_int[i]))$p_val, 3))
)
# Load files --------------------------------------------------------------
chisq_n_df <- read_csv("./data/chisq_n_mt.csv")
# Load files --------------------------------------------------------------
chisq_n_df <- read_csv("./data/chisq_n_mt.csv", col_names = c("unique_id", "p_val")) %>%
separate(col = unique_id,
into = c("lon", "lat"),
sep = "_",
convert= TRUE)
read_csv("./data/chisq_n_mt.csv", col_names = c("unique_id", "p_val"))
# Load files --------------------------------------------------------------
chisq_n_df <- read_csv("./data/chisq_n_mt.csv", col_names = c("p_val", "unique_id")) %>%
separate(col = unique_id,
into = c("lon", "lat"),
sep = "_",
convert= TRUE)
chisq_n_df %>% head()
chisq_n_df[1,]
chisq_n_df[1,3]
chisq_n_df$lat %>% head()
# Load files --------------------------------------------------------------
complete_prec_events_df <- read_csv("./data/livneh_unsplit/complete_prec_events.csv")
generated_prec_events_df <- read_csv(file = "./data/livneh_unsplit/generated_prec_events.csv")
prec_event_parameters_df <- read_csv("./data/prec_event_parameters.csv") %>%
rename(n = n_events,
q = q_hat,
p = p_hat,
b = b_hat)
gc()
?str_split
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
plot_hist(id)
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[[1]]
lat <- str_split(unique_id, pattern = "_")[[2]]
}
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[[1]]
lat <- str_split(unique_id, pattern = "_")[[2]]
lon
}
plot_hist(id)
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[1]
lat <- str_split(unique_id, pattern = "_")[2]
lon
}
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
plot_hist(id)
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[[1]][1]
lat <- str_split(unique_id, pattern = "_")[[1]][2]
lon
}
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
plot_hist(id)
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[[1]][1] %>% as.numeric()
lat <- str_split(unique_id, pattern = "_")[[1]][2] %>% as.numeric()
lon
}
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
plot_hist(id)
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[[1]][1] %>% as.numeric()
lat <- str_split(unique_id, pattern = "_")[[1]][2] %>% as.numeric()
lat
}
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
plot_hist(id)
?separate
chisq_n_df <- read_csv("./data/chisq_n_mt.csv", col_names = c("p_val", "unique_id")) %>%
separate(col = unique_id,
into = c("lon", "lat"),
sep = "_",
convert = TRUE,
remove = FALSE)
chisq_n_df %>% head()
gc()
?hist
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
# Load packages -----------------------------------------------------------
library(tidyverse)
# Load files --------------------------------------------------------------
complete_prec_events_df <- read_csv("./data/livneh_unsplit/complete_prec_events.csv")
generated_prec_events_df <- read_csv(file = "./data/livneh_unsplit/generated_prec_events.csv")
plot_double_hist <- function(A, B) {
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hist_min <- min(c(A,B))# Set the minimum for the breakpoints
hist_max <- max(c(A,B)) # Set the maximum for the breakpoints
#ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
ax <-seq(hist_min - 0.5, hist_max + 0.5, by = 0.5)
ax
}
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[1]
plot_doubt_hist(A = (complete_prec_events_df %>%
filter(unqiue_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
plot_double_hist(A = (complete_prec_events_df %>%
filter(unqiue_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
generated_prec_events_df %>% names()
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
plot_double_hist <- function(A, B) {
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hist_min <- min(c(A,B))# Set the minimum for the breakpoints
hist_max <- max(c(A,B)) # Set the maximum for the breakpoints
#ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
ax <-seq(hist_min - 0.5, hist_max + 0.5, by = 0.5)
ax
hgA <- hist(A, breaks = ax, plot = FALSE) # Save first histogram data
hgB <- hist(B, breaks = ax, plot = FALSE)
plot(hgA, col = c1) # Plot 1st histogram using a transparent color
plot(hgB, col = c2, add = TRUE)
}
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
?hist
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
plot_double_hist <- function(A, B) {
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hist_min <- min(c(A,B))# Set the minimum for the breakpoints
hist_max <- max(c(A,B)) # Set the maximum for the breakpoints
#ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
ax <-seq(hist_min - 0.5, hist_max + 0.5, by = 0.5)
ax
hgA <- hist(A, breaks = ax, plot = FALSE, freq = TRUE) # Save first histogram data
hgB <- hist(B, breaks = ax, plot = FALSE, freq = TRUE)
plot(hgA, col = c1) # Plot 1st histogram using a transparent color
plot(hgB, col = c2, add = TRUE)
}
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[2]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[2000]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
prec_event_parameters_df <- read_csv("./data/prec_event_parameters.csv") %>%
rename(n = n_events,
q = q_hat,
p = p_hat,
b = b_hat)
prec_event_parameters_df$n %>% density %>% plot()
prec_event_parameters_df$n %>% max()
prec_event_parameters_df$n[-which.max(prec_event_parameters_df$n)]
prec_event_parameters_df$n[-which.max(prec_event_parameters_df$n)] %>% max()
prec_event_parameters_df$n[-which.max(prec_event_parameters_df$n)] %>% density () %>% plot()
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[10000]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
# Load packages -----------------------------------------------------------
library(tidyverse)
source("./fun_overlapping_histograms.R")
# Load files --------------------------------------------------------------
complete_prec_events_df <- read_csv("./data/livneh_unsplit/complete_prec_events.csv")
generated_prec_events_df <- read_csv(file = "./data/livneh_unsplit/generated_prec_events.csv")
prec_event_parameters_df <- read_csv("./data/prec_event_parameters.csv") %>%
rename(n = n_events,
q = q_hat,
p = p_hat,
b = b_hat)
chisq_n_df <- read_csv("./data/chisq_n_mt.csv", col_names = c("p_val", "unique_id")) %>%
separate(col = unique_id,
into = c("lon", "lat"),
sep = "_",
convert = TRUE,
remove = FALSE)
gc()
# Cookie-cutter histogram function ----------------------------------------
plot_hist <- function(unique_id) {
lon <- str_split(unique_id, pattern = "_")[[1]][1] %>% as.numeric()
lat <- str_split(unique_id, pattern = "_")[[1]][2] %>% as.numeric()
}
source("./fun_overlapping_histograms.R")
# Test function -----------------------------------------------------------
id <- complete_prec_events_df$unique_id[10000]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
# Create "representative" subset ------------------------------------------
quantiles_of_interest <- chisq_n_df$p_val %>% quantile(c(0,0.58, 0.8,1))
quantiles_of_interest
# Create "representative" subset ------------------------------------------
quantiles_of_interest <- chisq_n_df$p_val %>% quantile(c(0,0.05, 0.8,1))
quantiles_of_interest
chisq_n_df$p_val %>% quantile(c(0,0.04, 0.8,1))
chisq_n_df$p_val %>% quantile(c(0,0.035, 0.8,1))
quantile(c(0,0.03, 0.8,1))
chisq_n_df$p_val %>% quantile(c(0,0.032, 0.8,1))
chisq_n_df$p_val %>% quantile(c(0,0.032, 0.10,1))
chisq_n_df$p_val %>% quantile(c(0,0.032, 0.15,1))
chisq_n_subset_df <- chisq_n_df %>%
filter(near(p_val, quantiles_of_interest[1], tol = 10^(-3))) %>%
slice_sample(n = 10) %>%
mutate(class = "bad") %>%
bind_rows(chisq_n_df %>%
filter(near(p_val, quantiles_of_interest[2], tol = 1/2 * 10^(-1)),
p_val > 0.05) %>%
slice_sample(n = 10) %>%
mutate(class = "just_passing")) %>%
bind_rows(chisq_n_df %>%
filter(near(p_val, quantiles_of_interest[3], tol = 1/2 * 10^(-1))) %>%
slice_sample(n = 10) %>%
mutate(class = "midling")) %>%
bind_rows(chisq_n_df %>%
filter(near(p_val, quantiles_of_interest[4], tol = 1/2 * 10^(-1))) %>%
slice_sample(n = 10) %>%
mutate(class = "nearly_perfect"))
chisq_n_subset_df
chisq_n_subset_df %>% View()
# Test function -----------------------------------------------------------
id = chisq_n_subset_df$unique_id[1]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
id
chisq_n_subset_df[1,]
# Test function -----------------------------------------------------------
id = chisq_n_subset_df$unique_id[31]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
# Test function -----------------------------------------------------------
id = chisq_n_subset_df$unique_id[35]
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
?seq_along
seq_along(chisq_n_subset_df$unique_id)
?png
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length)
?plot
?plot
source("./fun_overlapping_histograms.R")
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length,
)
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length,
main = paste0("Observed and Generated\n Event Length Counts\n", id)
)
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length,
main = paste0("Observed and Generated\n Event Length Counts\n", id)
)
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length,
title = paste0("Observed and Generated\n Event Length Counts\n", id)
)
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length,
title = paste0("Observed and Generated\n Event Length Counts\n", id),
subtitle = round((chisq_n_df %>%
filter(unique_id == id))$p_val, digits = 3)
)
plot_double_hist(A = (complete_prec_events_df %>%
filter(unique_id == id))$length,
B = (generated_prec_events_df %>%
filter(unique_id == id))$gen_length,
title = paste0("Observed and Generated\n Event Length Counts\n", id),
subtitle = paste0("p = ",
round((chisq_n_df %>%
filter(unique_id == id))$p_val, digits = 3))
)
paste0("./images/event_length_histograms/",
round((chisq_n_df %>%
filter(unique_id == id))$p_val, digits = 3),
"_",
id,
"_",
"histogram.png")
paste0("./images/event_length_histograms/",
"p="
round((chisq_n_df %>%
filter(unique_id == id))$p_val, digits = 3),
"_",
id,
"_",
"histogram.png")
paste0("./images/event_length_histograms/",
"p=",
round((chisq_n_df %>%
filter(unique_id == id))$p_val, digits = 3),
"_",
id,
"_",
"histogram.png")
?png
